Description: >
  A three-tier architecture, with a web tier, application-tier, db-tier and a
  set-up of the, route-53 hosted zone to direct traffic to ec2 instance.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidrBlock
          - PublicSubCidrBlock
          - PrivateSubCidrBlock
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - KeyName
          - InstanceTypeServerPUB
          - InstanceTypeServerPRIV
          - SSHLOCAION
          - SSHLOCAIONPriv
Parameters:
  KeyName:
    Description: Name of the exiting EC2 keypair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceTypeServerPUB:
    Description: Webserver EC2 instance type for the public web server
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type 
  InstanceTypeServerPRIV:
    Description: Webserver EC2 instance type for the private webserver
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type
  SSHLOCATION:
    Description: The IP address range that can be used to SSH to the EC2 instances in public subnet
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be valid IP CIDR range of the form x.x.x.x/x
  SSHLOCATIONPriv:
    Description: The IP address range that can be used to SSH to the EC2 instances in the private subnet
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be valid IP CIDR range of the form x.x.x.x/x
  VpcCidrBlock:
    Description: The cidr block for the VPC network
    Type: String
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  PublicSubCidrBlock:
    Description: the cidr block for the public subnet
    Type: String
    ConstraintDescription: must be a valid IP CIDR block form the VPC network
  PrivateSubACidrBlock:
    Description: the cidr block for the private subnet A
    Type: String
  PrivateSubBCidrBlock:
    Description: the cidr block for the private subnet B
    Type: String
  AllocatedStorageAPPS:
    Description: Amount of storage in gibibytes to be initially allocated to the Db instance
    Type: Number
  DBInstanceClassAPPS:
    Description: The compute and memeory capacity of the DB instance
    Type: String
    Default: db.t2.micro
  DBInstanceIdentifierAPPS:
    Description: A name for the DB Instance.
    Type: String
    Default: AppsRDSInstance
  DBNameAPPS:
    Description: The name of the database to create when the db instance is created.
    Type: String
    Default: DBAPPS
  RDSEngine:
    Description: The Database engine to use for this instance
    Type: String
    Default: mysql
  RDSEngineVersion:
    Description: The version number of the database engine to use
    Type: Number
  MasterUserName:
    Description: The master user name for the DB Instance.
    Type: String
    Default: admin
  MasterUserPassword:
    Description: The password for the master user. 
    Type: String
    MinLength: '8'
    MaxLength: '41'  # for a mysql engine
    AllowedPattern: "[a-zA-Z0-9!?]*"
    ConstraintDescription: Can include and printable ASCII character except "/",""", or "@"
  DBPort:
    Description: The port number on which the database accepts connections
    Type: Number
    Default: '3306'
Mappings:
  AWSRegionMapAMI:
    af-south-1:
      HVM64: ami-064cc455f8a1ef504
      HVMG2: NOT_SUPPORTED
    ap-east-1:
      HVM64: ami-f85b1989
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-0b2c2a754d5b4da22
      HVMG2: ami-09d0e0e099ecabba2
    ap-northeast-2:
      HVM64: ami-0493ab99920f410fc
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-01344f6f63a4decc1
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-03cfb5e1fb4fac428
      HVMG2: ami-0244c1d42815af84a
    ap-southeast-1:
      HVM64: ami-0ba35dc9caf73d1c7
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-0ae99b503e8694028
      HVMG2: ami-0c0ab057a101d8ff2
    ca-central-1:
      HVM64: ami-0803e21a2ec22f953
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-07a3f215cc90c889c
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0a3b3b10f714a0ff4
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0474863011a7d1541
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-0de4b8910494dba0f
      HVMG2: ami-32d55b4c
    eu-south-1:
      HVM64: ami-08427144fe9ebdef6
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-015232c01a82b847b
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-0765d48d7e15beb93
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c
      HVMG2: NOT_SUPPORTED
    me-south-1:
      HVM64: ami-0744743d80915b497
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-0a52e8a6018e92bb0
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-088c153f74339f34c
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01fee56b22f308154
      HVMG2: ami-0fe84a5b4563d8f27

Resources:
  #### VPC resource creation ####
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Project
          Value: Web-Application

  #### Subnets resource creation ####
  myPubSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubCidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Project
          Value: Project-PublicSubnet

  myPrivSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubACidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - key: Project
          Value: Project-PrivateSubnet

  myPrivSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: "us-east-1c"
      CidrBlock: !Ref PrivateSubBCidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - key: Project
          Value: Project-PrivateSubnet

  #### Creation of resources to configure the public subnet ####
  InternetGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
        - Key: Project
          Value: Project-IGW

  InternetGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !GetAtt InternetGW.InternetGatewayId
      VpcId: !Ref myVPC

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Project
          Value: Project-PubRtTb

  RoutePubRtb:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !GetAtt InternetGW.InternetGatewayId
      DestinationCidrBlock: 0.0.0.0/0

  PubRtbSubnetAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref myPubSubnet

  #### Creation of resources to configure the private subnet ####
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Project
          Value: Project-PrivRtTb

  #### Creation of security groups for the servers ####
  PublicServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: SG for the public server to allow HTTP and SSH request    
      GroupName: PublicServer_sg
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHLOCATION

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: Web-PubSG

  PrivateServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the private server to allow only SSH request from the public subnet of web-tier
      GroupName: PrivateServer_sg
      VpcId: !Ref myVPC
      SecurityGroupIngress: !Ref SSHLOCATIONPriv  
      Tags:
        - Key: Project
          Value: Application-PrivSG

  DbServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the database in the application-tier
      GroupName: DbServerSG
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref PrivateSubACidrBlock

  #### Creation of EC2 instances in the network ####
  EC2InstancePUB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [AWSRegionMapAMI, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceTypeServerPUB
      KeyName: !Ref KeyName
      SecurityGroupIds: !Ref PublicServerSG
      SubnetId: !Ref myPubSubnet
      Tags:
        - Key: Project
          Value: Web-PubServer

  EC2InstancePRIV:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [AWSRegionMapAMI, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceTypeServerPRIV
      KeyName: !Ref KeyName
      SecurityGroupIds: !Ref PrivateServerSG
      SubnetId: !Ref myPrivSubnetA
      Tags:
        - Key: Project
          Value: Web-PrivServer

  #### Database server creation  ####
  RDSInstanceAPPs:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref AllocatedStorageAPPS
      DBInstanceClass: !Ref DBInstanceClassAPPS
      DBInstanceIdentifier: !Ref DBInstanceIdentifierAPPS
      DBName: !Ref DBNameAPPS
      VPCSecurityGroups: !Ref DbServerSG
      DBSubnetGroupName: dbappsubnetgroup
      DeleteAutomatedBackups: 'true'
      Engine: !Ref RDSEngine
      Ports: !Ref DBPort

  DBSubnetGroupsVPC:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: the subnet group for myVPC
      DBSubnetGroupName: dbappsubnetgroup
      SubnetIds:
        - !Ref myPrivSubnetA
        - !Ref myPrivSubnetB










